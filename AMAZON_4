#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
    int n = nums1.size(), m = nums2.size();
    if (n > m) {
        swap(nums1, nums2);
        swap(n, m);
    }
    int imin = 0, imax = n, half_len = (n + m + 1) / 2;
    while (imin <= imax) {
        int i = (imin + imax) / 2;
        int j = half_len - i;
        if (i < n && nums2[j-1] > nums1[i]) {
            imin = i + 1;
        } else if (i > 0 && nums1[i-1] > nums2[j]) {
            imax = i - 1;
        } else {
            int max_of_left;
            if (i == 0) {
                max_of_left = nums2[j-1];
            } else if (j == 0) {
                max_of_left = nums1[i-1];
            } else {
                max_of_left = max(nums1[i-1], nums2[j-1]);
            }
            if ((n + m) % 2 == 1) {
                return max_of_left;
            }
            int min_of_right;
            if (i == n) {
                min_of_right = nums2[j];
            } else if (j == m) {
                min_of_right = nums1[i];
            } else {
                min_of_right = min(nums1[i], nums2[j]);
            }
            return (max_of_left + min_of_right) / 2.0;
        }
    }
    return 0.0;
}

int main() {
    int n, m;
    cin >> n >> m;
    vector<int> nums1(n), nums2(m);
    for (int i = 0; i < n; i++) {
        cin >> nums1[i];
    }
    for (int i = 0; i < m; i++) {
        cin >> nums2[i];
    }
    cout << findMedianSortedArrays(nums1, nums2) << endl;
    return 0;
}
